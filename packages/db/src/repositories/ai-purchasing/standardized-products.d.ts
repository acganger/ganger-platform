import { BaseRepository } from '../../utils/base-repository';
import type { StandardizedProduct, ProductCategory } from '@ganger/types';
import { z } from 'zod';
export declare const standardizedProductSchema: z.ZodObject<{
    name: z.ZodString;
    category: z.ZodEnum<["gloves_ppe", "wound_care", "syringes", "paper_products", "antiseptics", "diagnostic_supplies", "surgical_supplies", "medications", "other"]>;
    description: z.ZodOptional<z.ZodString>;
    specifications: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    standard_package_size: z.ZodString;
    unit_of_measure: z.ZodString;
    units_per_package: z.ZodNumber;
    minimum_order_quantity: z.ZodOptional<z.ZodNumber>;
    maximum_order_quantity: z.ZodOptional<z.ZodNumber>;
    reorder_point: z.ZodOptional<z.ZodNumber>;
    average_monthly_usage: z.ZodOptional<z.ZodNumber>;
    image_url: z.ZodOptional<z.ZodString>;
    is_active: z.ZodDefault<z.ZodBoolean>;
    is_critical: z.ZodDefault<z.ZodBoolean>;
    substitute_product_ids: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    is_active: boolean;
    category: "medications" | "gloves_ppe" | "wound_care" | "syringes" | "paper_products" | "antiseptics" | "diagnostic_supplies" | "surgical_supplies" | "other";
    specifications: string[];
    standard_package_size: string;
    unit_of_measure: string;
    units_per_package: number;
    is_critical: boolean;
    substitute_product_ids: string[];
    tags: string[];
    description?: string | undefined;
    minimum_order_quantity?: number | undefined;
    maximum_order_quantity?: number | undefined;
    reorder_point?: number | undefined;
    average_monthly_usage?: number | undefined;
    image_url?: string | undefined;
}, {
    name: string;
    category: "medications" | "gloves_ppe" | "wound_care" | "syringes" | "paper_products" | "antiseptics" | "diagnostic_supplies" | "surgical_supplies" | "other";
    standard_package_size: string;
    unit_of_measure: string;
    units_per_package: number;
    is_active?: boolean | undefined;
    description?: string | undefined;
    specifications?: string[] | undefined;
    minimum_order_quantity?: number | undefined;
    maximum_order_quantity?: number | undefined;
    reorder_point?: number | undefined;
    average_monthly_usage?: number | undefined;
    image_url?: string | undefined;
    is_critical?: boolean | undefined;
    substitute_product_ids?: string[] | undefined;
    tags?: string[] | undefined;
}>;
export type CreateStandardizedProductInput = z.infer<typeof standardizedProductSchema>;
export declare class StandardizedProductsRepository extends BaseRepository<StandardizedProduct> {
    constructor();
    findAll(onlyActive?: boolean): Promise<StandardizedProduct[]>;
    findByCategory(category: ProductCategory, onlyActive?: boolean): Promise<StandardizedProduct[]>;
    findActive(): Promise<StandardizedProduct[]>;
    findCritical(): Promise<StandardizedProduct[]>;
    findByIds(ids: string[]): Promise<StandardizedProduct[]>;
    search(query: string): Promise<StandardizedProduct[]>;
    findSubstitutes(productId: string): Promise<StandardizedProduct[]>;
    updateUsageStats(productId: string, quantity: number): Promise<void>;
    findProductsNeedingReorder(): Promise<StandardizedProduct[]>;
    createProduct(input: CreateStandardizedProductInput): Promise<StandardizedProduct>;
    toggleActive(productId: string, isActive: boolean): Promise<StandardizedProduct>;
    updateSubstitutes(productId: string, substituteIds: string[]): Promise<StandardizedProduct>;
}
