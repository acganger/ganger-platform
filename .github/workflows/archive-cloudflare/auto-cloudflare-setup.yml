name: üîß Auto-Setup Cloudflare Pages Projects

on:
  workflow_dispatch:
    inputs:
      force_recreate:
        description: 'Force recreate all projects'
        required: false
        default: 'false'

jobs:
  setup-cloudflare:
    name: üöÄ Auto-Setup Cloudflare Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Wrangler CLI
        run: npm install -g wrangler@latest
        
      - name: Create Pages Projects via Wrangler
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üöÄ Creating Cloudflare Pages projects..."
          
          # Create staff-production project
          wrangler pages project create staff-production \
            --production-branch main \
            --build-command "cd apps/staff && pnpm install && pnpm run build" \
            --build-output-directory "apps/staff/out" || echo "Project may exist"
            
          # Create reps-production project  
          wrangler pages project create reps-production \
            --production-branch main \
            --build-command "cd apps/pharma-scheduling && pnpm install && pnpm run build" \
            --build-output-directory "apps/pharma-scheduling/out" || echo "Project may exist"
            
          # Create kiosk-production project
          wrangler pages project create kiosk-production \
            --production-branch main \
            --build-command "cd apps/checkin-kiosk && pnpm install && pnpm run build" \
            --build-output-directory "apps/checkin-kiosk/out" || echo "Project may exist"
            
      - name: Connect GitHub Repository
        run: |
          echo "üîó Connecting GitHub repository to Cloudflare Pages..."
          
          # Connect each project to GitHub
          for project in staff-production reps-production kiosk-production; do
            echo "Connecting $project to GitHub..."
            wrangler pages deployment tail $project --format json || echo "Will connect on first deployment"
          done
          
      - name: Setup Custom Domains  
        run: |
          echo "üåê Setting up custom domains..."
          
          # Setup domains for each project
          wrangler pages domain add staff-production staff.gangerdermatology.com || echo "Domain may exist"
          wrangler pages domain add reps-production reps.gangerdermatology.com || echo "Domain may exist"  
          wrangler pages domain add kiosk-production kiosk.gangerdermatology.com || echo "Domain may exist"
          
      - name: Deploy Path Router Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üîÑ Deploying path-based routing worker..."
          cd cloudflare-workers
          wrangler deploy staff-router.js --name ganger-staff-router
          
      - name: Setup DNS Records
        run: |
          echo "üìù Creating DNS records..."
          
          # Create CNAME records for custom domains
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"CNAME","name":"staff","content":"staff-production.pages.dev","proxied":true}' || echo "DNS may exist"
            
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"CNAME","name":"reps","content":"reps-production.pages.dev","proxied":true}' || echo "DNS may exist"
            
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"type":"CNAME","name":"kiosk","content":"kiosk-production.pages.dev","proxied":true}' || echo "DNS may exist"
            
      - name: üéâ Setup Complete Notification
        run: |
          echo "üéâ Cloudflare setup complete!"
          echo "üì± Your applications will be available at:"
          echo "   ‚Ä¢ https://staff.gangerdermatology.com (main hub)"
          echo "   ‚Ä¢ https://reps.gangerdermatology.com (pharma scheduling)"  
          echo "   ‚Ä¢ https://kiosk.gangerdermatology.com (patient kiosk)"
          echo ""
          echo "üîÑ Path-based routing configured for staff portal:"
          echo "   ‚Ä¢ /inventory ‚Üí Inventory Management"
          echo "   ‚Ä¢ /handouts ‚Üí Patient Handouts"
          echo "   ‚Ä¢ /staffing ‚Üí Clinical Staffing"
          echo "   ‚Ä¢ /l10 ‚Üí EOS L10"
          echo "   ‚Ä¢ /meds ‚Üí Medication Authorization"
          echo "   ‚Ä¢ And 8 more applications..."
          echo ""
          echo "‚úÖ Ready for team demo!"