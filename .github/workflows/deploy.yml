# =============================================================================
# GANGER PLATFORM - CI/CD DEPLOYMENT PIPELINE
# =============================================================================
# Mission-Critical Medical Platform Deployment Automation
# Supports: Staging, Production, Manual Deployments
# Features: Quality Gates, Parallel Builds, Health Checks, Notifications
# =============================================================================

name: 🚀 Ganger Platform Deployment

on:
  # Production deployment on main branch
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'deployment/**'
      - '.github/workflows/**'
  
  # Staging deployment
  push:
    branches: [staging]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'deployment/**'
  
  # Manual deployment trigger with options
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      
      deployment_group:
        description: 'Application Group to Deploy'
        required: true
        default: 'critical'
        type: choice
        options:
          - all
          - critical
          - high
          - medium
          - low
      
      force_deploy:
        description: 'Force deploy even if health checks fail'
        required: false
        default: false
        type: boolean
      
      skip_tests:
        description: 'Skip quality validation (emergency only)'
        required: false
        default: false
        type: boolean

# =============================================================================
# ENVIRONMENT VARIABLES AND SECRETS
# =============================================================================

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  BUILD_TIMEOUT: '300'
  HEALTH_CHECK_TIMEOUT: '60'
  MAX_PARALLEL_BUILDS: '4'

# =============================================================================
# DEPLOYMENT JOBS
# =============================================================================

jobs:
  # ---------------------------------------------------------------------------
  # JOB 1: QUALITY VALIDATION AND PREREQUISITES
  # ---------------------------------------------------------------------------
  
  quality-gate:
    name: 🔍 Quality Validation
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    
    outputs:
      changed-apps: ${{ steps.changes.outputs.apps }}
      deployment-environment: ${{ steps.environment.outputs.env }}
      deployment-group: ${{ steps.environment.outputs.group }}
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🔽 Install Dependencies
        run: |
          pnpm install --frozen-lockfile
          chmod +x deployment/scripts/*.sh
      
      - name: 🎯 Determine Deployment Environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "group=${{ github.event.inputs.deployment_group }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
            echo "group=critical" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "group=all" >> $GITHUB_OUTPUT
          else
            echo "env=staging" >> $GITHUB_OUTPUT
            echo "group=all" >> $GITHUB_OUTPUT
          fi
      
      - name: 📋 Detect Changed Applications
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "apps=${{ github.event.inputs.deployment_group }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect changed applications
            changed_apps=$(git diff --name-only HEAD^ HEAD | grep '^apps/' | cut -d'/' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
            if [[ -z "$changed_apps" ]]; then
              changed_apps="all"
            fi
            echo "apps=$changed_apps" >> $GITHUB_OUTPUT
          fi
      
      - name: 🔍 Lint Code Quality
        run: pnpm run lint
      
      - name: 🏗️ TypeScript Validation
        run: pnpm run type-check
      
      - name: 🧪 Run Tests
        run: pnpm run test || echo "Tests not configured yet"
      
      - name: ✅ Application Validation
        run: |
          ./deployment/scripts/batch-verify.sh
        env:
          NODE_ENV: production

  # ---------------------------------------------------------------------------
  # JOB 2: PARALLEL BUILD MATRIX - CRITICAL APPLICATIONS
  # ---------------------------------------------------------------------------
  
  build-critical:
    name: 🏗️ Build Critical Apps
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: ${{ always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'skipped') }}
    
    strategy:
      matrix:
        app: 
          - call-center-ops
          - checkin-kiosk
          - config-dashboard
          - handouts
          - inventory
          - medication-auth
          - platform-dashboard
          - staff
      fail-fast: false
      max-parallel: 4
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Build Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🔽 Install Dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build Application
        timeout-minutes: 10
        run: |
          cd apps/${{ matrix.app }}
          pnpm run build
          pnpm exec next-on-pages
      
      - name: ✅ Verify Build Artifacts
        run: |
          if [[ ! -f "apps/${{ matrix.app }}/.vercel/output/static/_worker.js/index.js" ]]; then
            echo "❌ Build artifact missing for ${{ matrix.app }}"
            exit 1
          fi
          echo "✅ Build artifact verified for ${{ matrix.app }}"
      
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: apps/${{ matrix.app }}/.vercel/output/
          retention-days: 7

  # ---------------------------------------------------------------------------
  # JOB 3: PARALLEL BUILD MATRIX - HIGH PRIORITY APPLICATIONS
  # ---------------------------------------------------------------------------
  
  build-high:
    name: 🔨 Build High Priority Apps
    runs-on: ubuntu-latest
    needs: [quality-gate, build-critical]
    if: ${{ always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'skipped') }}
    
    strategy:
      matrix:
        app:
          - batch-closeout
          - clinical-staffing
          - compliance-training
          - eos-l10
          - integration-status
          - pharma-scheduling
      fail-fast: false
      max-parallel: 3
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Build Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🔽 Install Dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build Application
        timeout-minutes: 8
        run: |
          cd apps/${{ matrix.app }}
          pnpm run build
          pnpm exec next-on-pages
      
      - name: ✅ Verify Build Artifacts
        run: |
          if [[ ! -f "apps/${{ matrix.app }}/.vercel/output/static/_worker.js/index.js" ]]; then
            echo "❌ Build artifact missing for ${{ matrix.app }}"
            exit 1
          fi
          echo "✅ Build artifact verified for ${{ matrix.app }}"
      
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: apps/${{ matrix.app }}/.vercel/output/
          retention-days: 7

  # ---------------------------------------------------------------------------
  # JOB 4: BUILD REMAINING APPLICATIONS (MEDIUM/LOW PRIORITY)
  # ---------------------------------------------------------------------------
  
  build-remaining:
    name: 🧩 Build Remaining Apps
    runs-on: ubuntu-latest
    needs: [quality-gate, build-critical]
    if: ${{ always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'skipped') }}
    
    strategy:
      matrix:
        app:
          - ai-receptionist
          - socials-reviews
          - component-showcase
      fail-fast: false
      max-parallel: 2
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Build Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🔽 Install Dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 🏗️ Build Application
        timeout-minutes: 6
        run: |
          cd apps/${{ matrix.app }}
          pnpm run build
          pnpm exec next-on-pages
      
      - name: ✅ Verify Build Artifacts
        run: |
          if [[ ! -f "apps/${{ matrix.app }}/.vercel/output/static/_worker.js/index.js" ]]; then
            echo "❌ Build artifact missing for ${{ matrix.app }}"
            exit 1
          fi
          echo "✅ Build artifact verified for ${{ matrix.app }}"
      
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: apps/${{ matrix.app }}/.vercel/output/
          retention-days: 7

  # ---------------------------------------------------------------------------
  # JOB 5: STAGING DEPLOYMENT (NON-PRODUCTION)
  # ---------------------------------------------------------------------------
  
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate, build-critical, build-high, build-remaining]
    if: ${{ always() && needs.quality-gate.outputs.deployment-environment == 'staging' && (needs.build-critical.result == 'success' || needs.build-critical.result == 'skipped') }}
    
    environment:
      name: staging
      url: https://staff-staging.gangerdermatology.com
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔽 Download All Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 🔧 Setup Deployment Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Install Wrangler
        run: npm install -g wrangler
      
      - name: 🚀 Deploy Applications to Staging
        run: |
          chmod +x deployment/scripts/deploy-master.sh
          ./deployment/scripts/deploy-master.sh -e staging deploy ${{ needs.quality-gate.outputs.deployment-group }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: 🏥 Health Check Staging Deployment
        run: |
          ./deployment/scripts/deploy-master.sh -e staging health ${{ needs.quality-gate.outputs.deployment-group }}
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

  # ---------------------------------------------------------------------------
  # JOB 6: PRODUCTION DEPLOYMENT (MAIN BRANCH ONLY)
  # ---------------------------------------------------------------------------
  
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate, build-critical, build-high, build-remaining]
    if: ${{ always() && needs.quality-gate.outputs.deployment-environment == 'production' && needs.build-critical.result == 'success' }}
    
    environment:
      name: production
      url: https://staff.gangerdermatology.com
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔽 Download All Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 🔧 Setup Deployment Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Install Wrangler
        run: npm install -g wrangler
      
      - name: ⚠️ Production Deployment Confirmation
        run: |
          echo "🎯 PRODUCTION DEPLOYMENT INITIATED"
          echo "Environment: production"
          echo "Applications: ${{ needs.quality-gate.outputs.deployment-group }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
      
      - name: 🚀 Deploy Applications to Production
        run: |
          chmod +x deployment/scripts/deploy-master.sh
          ./deployment/scripts/deploy-master.sh -e production deploy ${{ needs.quality-gate.outputs.deployment-group }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: 🏥 Production Health Verification
        run: |
          ./deployment/scripts/deploy-master.sh -e production health ${{ needs.quality-gate.outputs.deployment-group }}
        continue-on-error: false

  # ---------------------------------------------------------------------------
  # JOB 7: POST-DEPLOYMENT MONITORING AND NOTIFICATIONS
  # ---------------------------------------------------------------------------
  
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy-staging, deploy-production]
    if: ${{ always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success') }}
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Monitoring Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: 🔽 Install Dependencies
        run: pnpm install --frozen-lockfile
      
      - name: 📊 Generate Deployment Report
        run: |
          chmod +x deployment/scripts/status-tracker.sh
          ./deployment/scripts/status-tracker.sh report ${{ needs.quality-gate.outputs.deployment-environment }} > deployment-report.md
      
      - name: 📋 Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.run_number }}
          path: deployment-report.md
          retention-days: 30
      
      - name: 📬 Slack Notification - Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: '✅ Ganger Platform Deployment Successful'
          SLACK_MESSAGE: |
            🎯 Environment: ${{ needs.quality-gate.outputs.deployment-environment }}
            📦 Applications: ${{ needs.quality-gate.outputs.deployment-group }}
            🚀 Commit: ${{ github.sha }}
            👤 Triggered by: ${{ github.actor }}
            ⏱️ Duration: ${{ github.event.head_commit.timestamp }}
          SLACK_COLOR: good
      
      - name: 📬 Slack Notification - Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: '❌ Ganger Platform Deployment Failed'
          SLACK_MESSAGE: |
            🎯 Environment: ${{ needs.quality-gate.outputs.deployment-environment }}
            📦 Applications: ${{ needs.quality-gate.outputs.deployment-group }}
            🚀 Commit: ${{ github.sha }}
            👤 Triggered by: ${{ github.actor }}
            ⚠️ Check logs for details
          SLACK_COLOR: danger

# =============================================================================
# WORKFLOW SECURITY AND PERMISSIONS
# =============================================================================

permissions:
  contents: read
  actions: read
  deployments: write
  id-token: write

# =============================================================================
# CONCURRENCY CONTROL
# =============================================================================

concurrency:
  group: deployment-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false