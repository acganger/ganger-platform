name: üöÄ Deploy AI Receptionist

on:
  push:
    branches: [ main ]
    paths: [ 'apps/ai-receptionist/**' ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  deploy-ai-receptionist:
    name: Build and Deploy AI Receptionist
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

            - name: Build shared packages
        run: |
          # Build shared packages that apps depend on
          cd packages/auth && pnpm build || echo "auth build failed"
          cd ../ui && pnpm build || echo "ui build failed" 
          cd ../db && pnpm build || echo "db build failed"
          cd ../utils && pnpm build || echo "utils build failed"
          cd ../integrations && pnpm build || echo "integrations build failed"

      - name: Build ai-receptionist
        run: |
          cd apps/ai-receptionist
          pnpm run build:cloudflare
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Deploy Worker
        run: |
          cd apps/ai-receptionist
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deployment Success
        run: |
          echo "‚úÖ AI Receptionist deployed successfully to Workers!"
          echo "üåê Access via: https://receptionist.gangerdermatology.com"
          echo "üåê Worker URL: https://ganger-ai-receptionist-prod.workers.dev"