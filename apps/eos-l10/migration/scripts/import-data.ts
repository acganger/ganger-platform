/**
 * L10 Data Import Script
 * Imports captured ninety.io data into L10 schema using @ganger/db patterns
 * 
 * Usage: npm run import-data
 * Phase: 1 Day 3-4 - Migration Implementation
 */

import fs from 'fs/promises';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// Environment configuration
const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  throw new Error('SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are required');
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Standard API response format as required by assignment
interface APIResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp: string;
}

// Type definitions for ninety.io data structures

interface NinetyTodo {
  _id: string;
  title: string;
  description: string;
  dueDate: string;
  originalDueDate: string;
  completed: boolean;
  completedDate: string | null;
  archived: boolean;
  archivedDate: string | null;
  userId: string;
  teamId: string;
  companyId: string;
  ordinal: number;
  userOrdinal: number;
  repeat: string;
  dueDateChanged: boolean;
  autoGenerated: boolean;
  followers: string[];
  createdDate: string;
  createdByUserId: string;
  googleTaskId: string | null;
  googleTaskListId: string | null;
}

interface NinetyRock {
  _id: string;
  title: string;
  description: string;
  dueDate: string;
  originalDueDate: string;
  dueDateQuarter: string;
  userId: string;
  teamId: string;
  companyId: string;
  statusCode: string;
  levelCode: string;
  userOrdinal: number;
  ordinal: number;
  archived: boolean;
  archivedDate: string | null;
  completedDate: string | null;
  followers: string[];
  createdDate: string;
  createdBy: string;
}


/**
 * Load JSON data from captured ninety.io files
 */
async function loadJSONData(filename: string): Promise<any> {
  try {
    const filePath = path.join(process.cwd(), 'migration', 'data', filename);
    const fileContent = await fs.readFile(filePath, 'utf-8');
    return JSON.parse(fileContent);
  } catch (error) {
    console.error(`Error loading ${filename}:`, error);
    return null;
  }
}

/**
 * Create standard API response
 */
function createResponse<T>(success: boolean, data?: T, error?: string): APIResponse<T> {
  return {
    success,
    data,
    error,
    timestamp: new Date().toISOString()
  };
}

/**
 * Get or create user mapping from email to UUID
 * Maps ninety.io user emails to Supabase auth users
 */
async function getUserMapping(email: string): Promise<string | null> {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('id')
      .eq('email', email)
      .single();

    if (error || !data) {
      console.warn(`User not found for email: ${email}`);
      return null;
    }

    return data.id;
  } catch (error) {
    console.error(`Error getting user mapping for ${email}:`, error);
    return null;
  }
}

/**
 * Import Ganger Dermatology company
 */
async function importCompany(): Promise<APIResponse<any>> {
  try {
    // Get admin user ID for created_by
    const adminUserId = await getUserMapping('anand@gangerdermatology.com');
    
    const { data, error } = await supabase
      .from('l10_companies')
      .upsert({
        ninety_id: '65f5c6312caa0d0012965019',
        name: 'Ganger Dermatology',
        created_by: adminUserId,
        updated_by: adminUserId
      }, {
        onConflict: 'ninety_id'
      })
      .select()
      .single();

    if (error) {
      return createResponse(false, null, `Company import failed: ${error.message}`);
    }

    console.log('✅ Company imported successfully');
    return createResponse(true, data);
  } catch (error) {
    return createResponse(false, null, `Company import error: ${error}`);
  }
}

/**
 * Import teams from ninety.io data
 */
async function importTeams(): Promise<APIResponse<any>> {
  try {
    // Load team data
    const teamData = await loadJSONData('api-https___app_ninety_io_api_v4_teams_65f5c6322caa0d001296501d.json');
    
    if (!teamData?.data) {
      return createResponse(false, null, 'No team data found');
    }

    const team = teamData.data;
    const adminUserId = await getUserMapping('anand@gangerdermatology.com');

    // Get company ID
    const { data: company } = await supabase
      .from('l10_companies')
      .select('id')
      .eq('ninety_id', '65f5c6312caa0d0012965019')
      .single();

    if (!company) {
      return createResponse(false, null, 'Company not found');
    }

    const { data, error } = await supabase
      .from('l10_teams')
      .upsert({
        ninety_id: team._id,
        company_id: company.id,
        name: team.name,
        is_project: team.project || false,
        settings: team.settings || {},
        created_by: adminUserId,
        updated_by: adminUserId
      }, {
        onConflict: 'ninety_id'
      })
      .select()
      .single();

    if (error) {
      return createResponse(false, null, `Team import failed: ${error.message}`);
    }

    console.log('✅ Leadership Team imported successfully');
    return createResponse(true, data);
  } catch (error) {
    return createResponse(false, null, `Team import error: ${error}`);
  }
}

/**
 * Import todos from ninety.io data
 */
async function importTodos(): Promise<APIResponse<any>> {
  try {
    // Load todos data
    const todosData = await loadJSONData('api-https___app_ninety_io_api_v4_todos_pageindex_0_pagesize_25_archived_false_userid_65f5d1f5f0607000125edb40.json');
    
    if (!todosData?.data?.items) {
      return createResponse(false, null, 'No todos data found');
    }

    const todos = todosData.data.items as NinetyTodo[];
    
    // Get company and team IDs
    const { data: company } = await supabase
      .from('l10_companies')
      .select('id')
      .eq('ninety_id', '65f5c6312caa0d0012965019')
      .single();

    const { data: team } = await supabase
      .from('l10_teams')
      .select('id')
      .eq('ninety_id', '65f5c6322caa0d001296501d')
      .single();

    if (!company || !team) {
      return createResponse(false, null, 'Company or team not found');
    }

    const importedTodos = [];

    for (const todo of todos) {
      // Map user email to UUID
      const assigneeId = await getUserMapping('anand@gangerdermatology.com'); // Default to AC
      const creatorId = await getUserMapping('ops@gangerdermatology.com'); // Kathy Keeley

      const { data, error } = await supabase
        .from('l10_todos')
        .upsert({
          ninety_id: todo._id,
          team_id: team.id,
          company_id: company.id,
          user_id: assigneeId,
          title: todo.title,
          description: todo.description,
          due_date: todo.dueDate ? new Date(todo.dueDate).toISOString() : null,
          original_due_date: todo.originalDueDate ? new Date(todo.originalDueDate).toISOString() : null,
          completed: todo.completed,
          completed_date: todo.completedDate ? new Date(todo.completedDate).toISOString() : null,
          archived: todo.archived,
          archived_date: todo.archivedDate ? new Date(todo.archivedDate).toISOString() : null,
          repeat_setting: todo.repeat,
          due_date_changed: todo.dueDateChanged,
          auto_generated: todo.autoGenerated,
          ordinal: todo.ordinal,
          user_ordinal: todo.userOrdinal,
          google_task_id: todo.googleTaskId,
          google_task_list_id: todo.googleTaskListId,
          created_by: creatorId,
          updated_by: creatorId
        }, {
          onConflict: 'ninety_id'
        })
        .select()
        .single();

      if (error) {
        console.error(`Failed to import todo ${todo.title}: ${error.message}`);
        continue;
      }

      importedTodos.push(data);
    }

    console.log(`✅ ${importedTodos.length} todos imported successfully`);
    return createResponse(true, importedTodos);
  } catch (error) {
    return createResponse(false, null, `Todos import error: ${error}`);
  }
}

/**
 * Import rocks from ninety.io data
 */
async function importRocks(): Promise<APIResponse<any>> {
  try {
    // Load rocks data
    const rocksData = await loadJSONData('api-https___app_ninety_io_api_v4_rocks_v2_rocksandmilestones_pageindex_0_pagesize_10_userid_65f5d1f5f0607000125edb40.json');
    
    if (!rocksData?.data?.rocks) {
      return createResponse(false, null, 'No rocks data found');
    }

    const rocks = rocksData.data.rocks as NinetyRock[];
    
    // Get company and team IDs
    const { data: company } = await supabase
      .from('l10_companies')
      .select('id')
      .eq('ninety_id', '65f5c6312caa0d0012965019')
      .single();

    const { data: team } = await supabase
      .from('l10_teams')
      .select('id')
      .eq('ninety_id', '65f5c6322caa0d001296501d')
      .single();

    if (!company || !team) {
      return createResponse(false, null, 'Company or team not found');
    }

    const importedRocks = [];

    for (const rock of rocks) {
      // Map user - all rocks assigned to AC Ganger
      const ownerId = await getUserMapping('anand@gangerdermatology.com');

      const { data, error } = await supabase
        .from('l10_rocks')
        .upsert({
          ninety_id: rock._id,
          team_id: team.id,
          company_id: company.id,
          user_id: ownerId,
          title: rock.title,
          description: rock.description,
          due_date: rock.dueDate ? new Date(rock.dueDate).toISOString() : null,
          original_due_date: rock.originalDueDate ? new Date(rock.originalDueDate).toISOString() : null,
          due_date_quarter: rock.dueDateQuarter,
          status_code: rock.statusCode,
          level_code: rock.levelCode,
          user_ordinal: rock.userOrdinal,
          ordinal: rock.ordinal,
          archived: rock.archived,
          archived_date: rock.archivedDate ? new Date(rock.archivedDate).toISOString() : null,
          completed_date: rock.completedDate ? new Date(rock.completedDate).toISOString() : null,
          created_by: ownerId,
          updated_by: ownerId
        }, {
          onConflict: 'ninety_id'
        })
        .select()
        .single();

      if (error) {
        console.error(`Failed to import rock ${rock.title}: ${error.message}`);
        continue;
      }

      importedRocks.push(data);
    }

    console.log(`✅ ${importedRocks.length} rocks imported successfully`);
    return createResponse(true, importedRocks);
  } catch (error) {
    return createResponse(false, null, `Rocks import error: ${error}`);
  }
}

/**
 * Main import function
 */
async function runDataImport(): Promise<void> {
  console.log('🚀 Starting L10 data import from ninety.io...\n');

  try {
    // Step 1: Import company
    console.log('📊 Importing company...');
    const companyResult = await importCompany();
    if (!companyResult.success) {
      console.error('❌ Company import failed:', companyResult.error);
      return;
    }

    // Step 2: Import teams
    console.log('👥 Importing teams...');
    const teamsResult = await importTeams();
    if (!teamsResult.success) {
      console.error('❌ Teams import failed:', teamsResult.error);
      return;
    }

    // Step 3: Import todos
    console.log('✅ Importing todos...');
    const todosResult = await importTodos();
    if (!todosResult.success) {
      console.error('❌ Todos import failed:', todosResult.error);
      return;
    }

    // Step 4: Import rocks
    console.log('🗿 Importing rocks...');
    const rocksResult = await importRocks();
    if (!rocksResult.success) {
      console.error('❌ Rocks import failed:', rocksResult.error);
      return;
    }

    console.log('\n🎉 L10 data import completed successfully!');
    console.log('📈 Summary:');
    console.log(`   - Company: Ganger Dermatology`);
    console.log(`   - Teams: Leadership Team`);
    console.log(`   - Todos: ${Array.isArray(todosResult.data) ? todosResult.data.length : 1} imported`);
    console.log(`   - Rocks: ${Array.isArray(rocksResult.data) ? rocksResult.data.length : 1} imported`);

  } catch (error) {
    console.error('💥 Import failed with error:', error);
    process.exit(1);
  }
}

// Execute if run directly
if (require.main === module) {
  runDataImport();
}

export {
  runDataImport,
  importCompany,
  importTeams,
  importTodos,
  importRocks
};